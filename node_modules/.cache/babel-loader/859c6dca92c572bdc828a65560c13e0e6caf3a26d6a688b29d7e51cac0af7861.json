{"ast":null,"code":"var _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(({\n  ownerState\n}) => ({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  ...(ownerState.fullWidth && {\n    width: '100%'\n  }),\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)',\n    ...(ownerState.size === 'small' && {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    })\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0,\n    ...(ownerState.inputFocused && {\n      opacity: 1\n    })\n  }\n}));\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n});\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => ({\n    ...styles.popupIndicator,\n    ...(ownerState.popupOpen && styles.popupIndicatorOpen)\n  })\n})(({\n  ownerState\n}) => ({\n  padding: 2,\n  marginRight: -2,\n  ...(ownerState.popupOpen && {\n    transform: 'rotate(180deg)'\n  })\n}));\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme,\n  ownerState\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  ...(ownerState.disablePortal && {\n    position: 'absolute'\n  })\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => ({\n  ...theme.typography.body1,\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps = {},\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionLabel = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    isOptionEqualToValue,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slotProps = {},\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    componentName: 'Autocomplete'\n  });\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    ...props,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => ({\n      className: classes.tag,\n      disabled,\n      ...getTagProps(params)\n    });\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, {\n        label: getOptionLabel(option),\n        size: size,\n        ...getCustomizedTagProps({\n          index\n        }),\n        ...ChipProps\n      }));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push(/*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", {\n    ...props2,\n    children: getOptionLabel(option)\n  });\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...optionProps,\n      className: classes.option\n    }, option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    });\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...getRootProps(other),\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          },\n          ...((hasClearIcon || hasPopupIcon) && {\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n              className: classes.endAdornment,\n              ownerState: ownerState,\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\n                ...getClearProps(),\n                \"aria-label\": clearText,\n                title: clearText,\n                ownerState: ownerState,\n                ...clearIndicatorSlotProps,\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n                children: clearIcon\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\n                ...getPopupIndicatorProps(),\n                disabled: disabled,\n                \"aria-label\": popupOpen ? closeText : openText,\n                title: popupOpen ? closeText : openText,\n                ownerState: ownerState,\n                ...popupIndicatorSlotProps,\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n                children: popupIcon\n              }) : null]\n            })\n          })\n        },\n        inputProps: {\n          className: classes.input,\n          disabled,\n          readOnly,\n          ...getInputProps()\n        }\n      })\n    }), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: popupOpen,\n      ...popperSlotProps,\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        ownerState: ownerState,\n        as: PaperComponent,\n        ...paperSlotProps,\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, {\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState,\n          ...getListboxProps(),\n          ...ListboxProps,\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        }) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"names":["_ClearIcon","_ArrowDropDownIcon","React","PropTypes","clsx","chainPropTypes","integerPropType","unstable_composeClasses","composeClasses","useAutocomplete","createFilterOptions","alpha","Popper","ListSubheader","Paper","IconButton","Chip","inputClasses","inputBaseClasses","outlinedInputClasses","filledInputClasses","ClearIcon","ArrowDropDownIcon","useThemeProps","styled","autocompleteClasses","getAutocompleteUtilityClass","capitalize","jsx","_jsx","jsxs","_jsxs","useUtilityClasses","ownerState","classes","disablePortal","expanded","focused","fullWidth","hasClearIcon","hasPopupIcon","inputFocused","popupOpen","size","slots","root","inputRoot","input","tag","endAdornment","clearIndicator","popupIndicator","popper","paper","listbox","loading","noOptions","option","groupLabel","groupUl","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","width","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","sizeSmall","right","paddingTop","paddingLeft","hiddenLabel","flexGrow","textOverflow","opacity","AutocompleteEndAdornment","position","top","AutocompleteClearIndicator","marginRight","AutocompletePopupIndicator","popupIndicatorOpen","transform","AutocompletePopper","popperDisablePortal","theme","zIndex","vars","modal","AutocompletePaper","typography","body1","overflow","AutocompleteLoading","color","palette","text","secondary","AutocompleteNoOptions","AutocompleteListbox","listStyle","maxHeight","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","focusVisible","focus","primary","mainChannel","selectedOpacity","main","hoverOpacity","selected","focusOpacity","AutocompleteGroupLabel","background","AutocompleteGroupUl","Autocomplete","forwardRef","inProps","ref","_slotProps$clearIndic","_slotProps$paper","_slotProps$popper","_slotProps$popupIndic","autoComplete","autoHighlight","autoSelect","blurOnSelect","ChipProps","className","clearIcon","fontSize","clearOnBlur","freeSolo","clearOnEscape","clearText","closeText","componentsProps","defaultValue","multiple","disableClearable","disableCloseOnSelect","disabled","disabledItemsFocusable","disableListWrap","filterOptions","filterSelectedOptions","forcePopupIcon","getLimitTagsText","more","getOptionDisabled","getOptionLabel","_option$label","label","isOptionEqualToValue","groupBy","handleHomeEndKeys","id","idProp","includeInputInList","inputValue","inputValueProp","limitTags","ListboxComponent","ListboxProps","loadingText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","PaperComponent","PopperComponent","popupIcon","readOnly","renderGroup","renderGroupProp","renderInput","renderOption","renderOptionProp","renderTags","selectOnFocus","slotProps","value","valueProp","other","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","focusedTag","anchorEl","setAnchorEl","groupedOptions","componentName","onMouseDown","handleInputMouseDown","startAdornment","length","getCustomizedTagProps","params","map","index","Array","isArray","splice","push","children","defaultRenderGroup","component","group","key","defaultRenderOption","props2","renderListOption","optionProps","clearIndicatorSlotProps","paperSlotProps","popperSlotProps","popupIndicatorSlotProps","Fragment","undefined","InputLabelProps","InputProps","onClick","event","target","currentTarget","title","inputProps","as","style","clientWidth","role","preventDefault","option2","index2","process","env","NODE_ENV","propTypes","bool","oneOfType","oneOf","object","string","node","shape","any","Error","join","func","elementType","array","isRequired","sx","arrayOf"],"sources":["/Users/sriyachoudary/Desktop/Portfolio/Portfolio/node_modules/@mui/material/Autocomplete/Autocomplete.js"],"sourcesContent":["var _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses, useAutocomplete, createFilterOptions } from '@mui/base';\nimport { alpha } from '@mui/system';\nimport Popper from '../Popper';\nimport ListSubheader from '../ListSubheader';\nimport Paper from '../Paper';\nimport IconButton from '../IconButton';\nimport Chip from '../Chip';\nimport inputClasses from '../Input/inputClasses';\nimport inputBaseClasses from '../InputBase/inputBaseClasses';\nimport outlinedInputClasses from '../OutlinedInput/outlinedInputClasses';\nimport filledInputClasses from '../FilledInput/filledInputClasses';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport capitalize from '../utils/capitalize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused,\n    popupOpen,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],\n    inputRoot: ['inputRoot'],\n    input: ['input', inputFocused && 'inputFocused'],\n    tag: ['tag', `tagSize${capitalize(size)}`],\n    endAdornment: ['endAdornment'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],\n    popper: ['popper', disablePortal && 'popperDisablePortal'],\n    paper: ['paper'],\n    listbox: ['listbox'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    option: ['option'],\n    groupLabel: ['groupLabel'],\n    groupUl: ['groupUl']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, classes);\n};\nconst AutocompleteRoot = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      fullWidth,\n      hasClearIcon,\n      hasPopupIcon,\n      inputFocused,\n      size\n    } = ownerState;\n    return [{\n      [`& .${autocompleteClasses.tag}`]: styles.tag\n    }, {\n      [`& .${autocompleteClasses.tag}`]: styles[`tagSize${capitalize(size)}`]\n    }, {\n      [`& .${autocompleteClasses.inputRoot}`]: styles.inputRoot\n    }, {\n      [`& .${autocompleteClasses.input}`]: styles.input\n    }, {\n      [`& .${autocompleteClasses.input}`]: inputFocused && styles.inputFocused\n    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];\n  }\n})(({\n  ownerState\n}) => ({\n  [`&.${autocompleteClasses.focused} .${autocompleteClasses.clearIndicator}`]: {\n    visibility: 'visible'\n  },\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  ...(ownerState.fullWidth && {\n    width: '100%'\n  }),\n  [`& .${autocompleteClasses.tag}`]: {\n    margin: 3,\n    maxWidth: 'calc(100% - 6px)',\n    ...(ownerState.size === 'small' && {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    })\n  },\n  [`& .${autocompleteClasses.inputRoot}`]: {\n    flexWrap: 'wrap',\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      width: 0,\n      minWidth: 30\n    }\n  },\n  [`& .${inputClasses.root}`]: {\n    paddingBottom: 1,\n    '& .MuiInput-input': {\n      padding: '4px 4px 4px 0px'\n    }\n  },\n  [`& .${inputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${inputClasses.input}`]: {\n      padding: '2px 4px 3px 0'\n    }\n  },\n  [`& .${outlinedInputClasses.root}`]: {\n    padding: 9,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '7.5px 4px 7.5px 5px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${outlinedInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    // Don't specify paddingRight, as it overrides the default value set when there is only\n    // one of the popup or clear icon as the specificity is equal so the latter one wins\n    paddingTop: 6,\n    paddingBottom: 6,\n    paddingLeft: 6,\n    [`& .${autocompleteClasses.input}`]: {\n      padding: '2.5px 4px 2.5px 8px'\n    }\n  },\n  [`& .${filledInputClasses.root}`]: {\n    paddingTop: 19,\n    paddingLeft: 8,\n    [`.${autocompleteClasses.hasPopupIcon}&, .${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 26 + 4 + 9\n    },\n    [`.${autocompleteClasses.hasPopupIcon}.${autocompleteClasses.hasClearIcon}&`]: {\n      paddingRight: 52 + 4 + 9\n    },\n    [`& .${filledInputClasses.input}`]: {\n      padding: '7px 4px'\n    },\n    [`& .${autocompleteClasses.endAdornment}`]: {\n      right: 9\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.sizeSmall}`]: {\n    paddingBottom: 1,\n    [`& .${filledInputClasses.input}`]: {\n      padding: '2.5px 4px'\n    }\n  },\n  [`& .${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 8\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}`]: {\n    paddingTop: 0,\n    paddingBottom: 0,\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 16,\n      paddingBottom: 17\n    }\n  },\n  [`& .${filledInputClasses.root}.${inputBaseClasses.hiddenLabel}.${inputBaseClasses.sizeSmall}`]: {\n    [`& .${autocompleteClasses.input}`]: {\n      paddingTop: 8,\n      paddingBottom: 9\n    }\n  },\n  [`& .${autocompleteClasses.input}`]: {\n    flexGrow: 1,\n    textOverflow: 'ellipsis',\n    opacity: 0,\n    ...(ownerState.inputFocused && {\n      opacity: 1\n    })\n  }\n}));\nconst AutocompleteEndAdornment = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'EndAdornment',\n  overridesResolver: (props, styles) => styles.endAdornment\n})({\n  // We use a position absolute to support wrapping tags.\n  position: 'absolute',\n  right: 0,\n  top: 'calc(50% - 14px)' // Center vertically\n});\n\nconst AutocompleteClearIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})({\n  marginRight: -2,\n  padding: 4,\n  visibility: 'hidden'\n});\nconst AutocompletePopupIndicator = styled(IconButton, {\n  name: 'MuiAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: ({\n    ownerState\n  }, styles) => ({\n    ...styles.popupIndicator,\n    ...(ownerState.popupOpen && styles.popupIndicatorOpen)\n  })\n})(({\n  ownerState\n}) => ({\n  padding: 2,\n  marginRight: -2,\n  ...(ownerState.popupOpen && {\n    transform: 'rotate(180deg)'\n  })\n}));\nconst AutocompletePopper = styled(Popper, {\n  name: 'MuiAutocomplete',\n  slot: 'Popper',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${autocompleteClasses.option}`]: styles.option\n    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];\n  }\n})(({\n  theme,\n  ownerState\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.modal,\n  ...(ownerState.disablePortal && {\n    position: 'absolute'\n  })\n}));\nconst AutocompletePaper = styled(Paper, {\n  name: 'MuiAutocomplete',\n  slot: 'Paper',\n  overridesResolver: (props, styles) => styles.paper\n})(({\n  theme\n}) => ({\n  ...theme.typography.body1,\n  overflow: 'auto'\n}));\nconst AutocompleteLoading = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteNoOptions = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  padding: '14px 16px'\n}));\nconst AutocompleteListbox = styled('div', {\n  name: 'MuiAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  listStyle: 'none',\n  margin: 0,\n  padding: '8px 0',\n  maxHeight: '40vh',\n  overflow: 'auto',\n  position: 'relative',\n  [`& .${autocompleteClasses.option}`]: {\n    minHeight: 48,\n    display: 'flex',\n    overflow: 'hidden',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    cursor: 'pointer',\n    paddingTop: 6,\n    boxSizing: 'border-box',\n    outline: '0',\n    WebkitTapHighlightColor: 'transparent',\n    paddingBottom: 6,\n    paddingLeft: 16,\n    paddingRight: 16,\n    [theme.breakpoints.up('sm')]: {\n      minHeight: 'auto'\n    },\n    [`&.${autocompleteClasses.focused}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    '&[aria-disabled=\"true\"]': {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    },\n    [`&.${autocompleteClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n      [`&.${autocompleteClasses.focused}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: (theme.vars || theme).palette.action.selected\n        }\n      },\n      [`&.${autocompleteClasses.focusVisible}`]: {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n      }\n    }\n  }\n}));\nconst AutocompleteGroupLabel = styled(ListSubheader, {\n  name: 'MuiAutocomplete',\n  slot: 'GroupLabel',\n  overridesResolver: (props, styles) => styles.groupLabel\n})(({\n  theme\n}) => ({\n  backgroundColor: (theme.vars || theme).palette.background.paper,\n  top: -8\n}));\nconst AutocompleteGroupUl = styled('ul', {\n  name: 'MuiAutocomplete',\n  slot: 'GroupUl',\n  overridesResolver: (props, styles) => styles.groupUl\n})({\n  padding: 0,\n  [`& .${autocompleteClasses.option}`]: {\n    paddingLeft: 24\n  }\n});\nexport { createFilterOptions };\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiAutocomplete'\n  });\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    autoComplete = false,\n    autoHighlight = false,\n    autoSelect = false,\n    blurOnSelect = false,\n    ChipProps,\n    className,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"small\"\n    })),\n    clearOnBlur = !props.freeSolo,\n    clearOnEscape = false,\n    clearText = 'Clear',\n    closeText = 'Close',\n    componentsProps = {},\n    defaultValue = props.multiple ? [] : null,\n    disableClearable = false,\n    disableCloseOnSelect = false,\n    disabled = false,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    disablePortal = false,\n    filterOptions,\n    filterSelectedOptions = false,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    fullWidth = false,\n    getLimitTagsText = more => `+${more}`,\n    getOptionDisabled,\n    getOptionLabel = option => {\n      var _option$label;\n      return (_option$label = option.label) != null ? _option$label : option;\n    },\n    isOptionEqualToValue,\n    groupBy,\n    handleHomeEndKeys = !props.freeSolo,\n    id: idProp,\n    includeInputInList = false,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    ListboxComponent = 'ul',\n    ListboxProps,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus = false,\n    openText = 'Open',\n    options,\n    PaperComponent = Paper,\n    PopperComponent = Popper,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup: renderGroupProp,\n    renderInput,\n    renderOption: renderOptionProp,\n    renderTags,\n    selectOnFocus = !props.freeSolo,\n    size = 'medium',\n    slotProps = {},\n    value: valueProp,\n    ...other\n  } = props;\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  const {\n    getRootProps,\n    getInputProps,\n    getInputLabelProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    expanded,\n    id,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    componentName: 'Autocomplete'\n  });\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    ...props,\n    disablePortal,\n    expanded,\n    focused,\n    fullWidth,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  let startAdornment;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => ({\n      className: classes.tag,\n      disabled,\n      ...getTagProps(params)\n    });\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      startAdornment = value.map((option, index) => /*#__PURE__*/_jsx(Chip, {\n        label: getOptionLabel(option),\n        size: size,\n        ...getCustomizedTagProps({\n          index\n        }),\n        ...ChipProps\n      }));\n    }\n  }\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    const more = startAdornment.length - limitTags;\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/_jsx(\"span\", {\n        className: classes.tag,\n        children: getLimitTagsText(more)\n      }, startAdornment.length));\n    }\n  }\n  const defaultRenderGroup = params => /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(AutocompleteGroupLabel, {\n      className: classes.groupLabel,\n      ownerState: ownerState,\n      component: \"div\",\n      children: params.group\n    }), /*#__PURE__*/_jsx(AutocompleteGroupUl, {\n      className: classes.groupUl,\n      ownerState: ownerState,\n      children: params.children\n    })]\n  }, params.key);\n  const renderGroup = renderGroupProp || defaultRenderGroup;\n  const defaultRenderOption = (props2, option) => /*#__PURE__*/_jsx(\"li\", {\n    ...props2,\n    children: getOptionLabel(option)\n  });\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...optionProps,\n      className: classes.option\n    }, option, {\n      selected: optionProps['aria-selected'],\n      index,\n      inputValue\n    });\n  };\n  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;\n  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;\n  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;\n  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(AutocompleteRoot, {\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...getRootProps(other),\n      children: renderInput({\n        id,\n        disabled,\n        fullWidth: true,\n        size: size === 'small' ? 'small' : undefined,\n        InputLabelProps: getInputLabelProps(),\n        InputProps: {\n          ref: setAnchorEl,\n          className: classes.inputRoot,\n          startAdornment,\n          onClick: event => {\n            if (event.target === event.currentTarget) {\n              handleInputMouseDown(event);\n            }\n          },\n          ...((hasClearIcon || hasPopupIcon) && {\n            endAdornment: /*#__PURE__*/_jsxs(AutocompleteEndAdornment, {\n              className: classes.endAdornment,\n              ownerState: ownerState,\n              children: [hasClearIcon ? /*#__PURE__*/_jsx(AutocompleteClearIndicator, {\n                ...getClearProps(),\n                \"aria-label\": clearText,\n                title: clearText,\n                ownerState: ownerState,\n                ...clearIndicatorSlotProps,\n                className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),\n                children: clearIcon\n              }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(AutocompletePopupIndicator, {\n                ...getPopupIndicatorProps(),\n                disabled: disabled,\n                \"aria-label\": popupOpen ? closeText : openText,\n                title: popupOpen ? closeText : openText,\n                ownerState: ownerState,\n                ...popupIndicatorSlotProps,\n                className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),\n                children: popupIcon\n              }) : null]\n            })\n          })\n        },\n        inputProps: {\n          className: classes.input,\n          disabled,\n          readOnly,\n          ...getInputProps()\n        }\n      })\n    }), anchorEl ? /*#__PURE__*/_jsx(AutocompletePopper, {\n      as: PopperComponent,\n      disablePortal: disablePortal,\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : null\n      },\n      ownerState: ownerState,\n      role: \"presentation\",\n      anchorEl: anchorEl,\n      open: popupOpen,\n      ...popperSlotProps,\n      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),\n      children: /*#__PURE__*/_jsxs(AutocompletePaper, {\n        ownerState: ownerState,\n        as: PaperComponent,\n        ...paperSlotProps,\n        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),\n        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(AutocompleteLoading, {\n          className: classes.loading,\n          ownerState: ownerState,\n          children: loadingText\n        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(AutocompleteNoOptions, {\n          className: classes.noOptions,\n          ownerState: ownerState,\n          role: \"presentation\",\n          onMouseDown: event => {\n            // Prevent input blur when interacting with the \"no options\" content\n            event.preventDefault();\n          },\n          children: noOptionsText\n        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/_jsx(AutocompleteListbox, {\n          as: ListboxComponent,\n          className: classes.listbox,\n          ownerState: ownerState,\n          ...getListboxProps(),\n          ...ListboxProps,\n          children: groupedOptions.map((option, index) => {\n            if (groupBy) {\n              return renderGroup({\n                key: option.key,\n                group: option.group,\n                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          })\n        }) : null]\n      })\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps: PropTypes.object,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set to `true` if you want to help the user enter a new value.\n   * Set to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {T} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {T} option The option to test.\n   * @param {T} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent: PropTypes.elementType,\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps: PropTypes.object,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T|T[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {T} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent: PropTypes.elementType,\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent: PropTypes.elementType,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: PropTypes.func.isRequired,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.object,\n    paper: PropTypes.object,\n    popper: PropTypes.object,\n    popupIndicator: PropTypes.object\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  })\n} : void 0;\nexport default Autocomplete;"],"mappings":"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EACEnG,SAAS,EAAEjL,eAAe;EAC1B;AACF;AACA;AACA;EACEkL,gBAAgB,EAAErL,SAAS,CAACwR,WAAW;EACvC;AACF;AACA;EACElG,YAAY,EAAEtL,SAAS,CAACgR,MAAM;EAC9B;AACF;AACA;AACA;AACA;EACE5N,OAAO,EAAEpD,SAAS,CAAC6Q,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;EACEtF,WAAW,EAAEvL,SAAS,CAACkR,IAAI;EAC3B;AACF;AACA;AACA;EACErH,QAAQ,EAAE7J,SAAS,CAAC6Q,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACErF,aAAa,EAAExL,SAAS,CAACkR,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEzF,QAAQ,EAAEzL,SAAS,CAACuR,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACE7F,OAAO,EAAE1L,SAAS,CAACuR,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;EACE5F,iBAAiB,EAAE3L,SAAS,CAACuR,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACE3F,aAAa,EAAE5L,SAAS,CAACuR,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;EACE1F,MAAM,EAAE7L,SAAS,CAACuR,IAAI;EACtB;AACF;AACA;EACEzF,IAAI,EAAE9L,SAAS,CAAC6Q,IAAI;EACpB;AACF;AACA;AACA;EACE9E,WAAW,EAAE/L,SAAS,CAAC6Q,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE7E,QAAQ,EAAEhM,SAAS,CAACiR,MAAM;EAC1B;AACF;AACA;EACEhF,OAAO,EAAEjM,SAAS,CAACyR,KAAK,CAACC,UAAU;EACnC;AACF;AACA;AACA;EACExF,cAAc,EAAElM,SAAS,CAACwR,WAAW;EACrC;AACF;AACA;AACA;EACErF,eAAe,EAAEnM,SAAS,CAACwR,WAAW;EACtC;AACF;AACA;AACA;EACEpF,SAAS,EAAEpM,SAAS,CAACkR,IAAI;EACzB;AACF;AACA;AACA;EACE7E,QAAQ,EAAErM,SAAS,CAAC6Q,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACEvE,WAAW,EAAEtM,SAAS,CAACuR,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE/E,WAAW,EAAExM,SAAS,CAACuR,IAAI,CAACG,UAAU;EACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEjF,YAAY,EAAEzM,SAAS,CAACuR,IAAI;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE5E,UAAU,EAAE3M,SAAS,CAACuR,IAAI;EAC1B;AACF;AACA;AACA;AACA;EACE3E,aAAa,EAAE5M,SAAS,CAAC6Q,IAAI;EAC7B;AACF;AACA;AACA;EACErO,IAAI,EAAExC,SAAS,CAAC,sCAAsC8Q,SAAS,CAAC,CAAC9Q,SAAS,CAAC+Q,KAAK,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,EAAE/Q,SAAS,CAACiR,MAAM,CAAC,CAAC;EACzH;AACF;AACA;AACA;EACEpE,SAAS,EAAE7M,SAAS,CAACmR,KAAK,CAAC;IACzBpO,cAAc,EAAE/C,SAAS,CAACgR,MAAM;IAChC9N,KAAK,EAAElD,SAAS,CAACgR,MAAM;IACvB/N,MAAM,EAAEjD,SAAS,CAACgR,MAAM;IACxBhO,cAAc,EAAEhD,SAAS,CAACgR;EAC5B,CAAC,CAAC;EACF;AACF;AACA;EACEW,EAAE,EAAE3R,SAAS,CAAC8Q,SAAS,CAAC,CAAC9Q,SAAS,CAAC4R,OAAO,CAAC5R,SAAS,CAAC8Q,SAAS,CAAC,CAAC9Q,SAAS,CAACuR,IAAI,EAAEvR,SAAS,CAACgR,MAAM,EAAEhR,SAAS,CAAC6Q,IAAI,CAAC,CAAC,CAAC,EAAE7Q,SAAS,CAACuR,IAAI,EAAEvR,SAAS,CAACgR,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;AACA;AACA;AACA;EACElE,KAAK,EAAE5M,cAAc,CAACF,SAAS,CAACoR,GAAG,EAAEvN,KAAK,IAAI;IAC5C,IAAIA,KAAK,CAACgG,QAAQ,IAAIhG,KAAK,CAACiJ,KAAK,KAAK2C,SAAS,IAAI,CAAClB,KAAK,CAACC,OAAO,CAAC3K,KAAK,CAACiJ,KAAK,CAAC,EAAE;MAC9E,OAAO,IAAIuE,KAAK,CAAC,CAAC,oGAAoG,EAAE,YAAYxN,KAAK,CAACiJ,KAAK,gBAAgB,CAAC,CAACwE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9K;IACA,OAAO,IAAI;EACb,CAAC;AACH,CAAC,GAAG,KAAK,CAAC;AACV,eAAehJ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}